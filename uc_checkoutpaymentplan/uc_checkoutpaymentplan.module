<?php

/**
 * @file
 * Checkout.com Payment Plans module.
 *
 * This module provides Checkout.com payment plan integration to Ubercart.
 */

/**
 * Constants declarations.
 */
const TECHNICAL_NAME = "cko_payment_plan";
const USER_FRIENDLY_NAME = "Payment Plan";
const USER_FRIENDLY_PLURAL = "Payment Plans";
const CREATE_CONTENT_DESCRIPTION = "Payment Plans store all the necessary information in support of implementing subscription services, membership services, and other popular recurring payment models.";
const ADMIN_HELP_TEXT = "This module was created by <i class='cko-logo'></i><b>Checkout</b>.com.";

module_load_include('php', 'uc_checkoutpaymentplan', 'includes/methods/objects');

/**
 * Implements hook_menu().
 */
function uc_checkoutpaymentplan_menu() {
  $items = array();

  $items['uc_checkoutpaymentplan/develop'] = array(
    'title' => 'Developping page',
    'page callback' => 'page_development',
    /* Access neccecary for webhooks */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/subscriptions'] = array(
    'title' => t('Subscriptions'),
    'page callback' => 'ckopp_page_user_subscriptions',
    'page arguments' => array(1),
    'access arguments' => array('view own subscriptions'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/orders/subscriptions'] = array(
    'title' => 'Subscriptions',
    'description' => 'View the subscriptions handled by Checkout.com.',
    'page callback' => 'ckopp_page_admin_subscriptions',
    'page arguments' => array(NULL, NULL),
    'access arguments' => array('view subscriptions'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );

  $items['uc_checkoutpaymentplan/ajax'] = array(
    'title' => 'Ajax call',
    'page callback' => 'ckopp_ajax_call',
    /* Access neccecary for AJAX request */
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function uc_checkoutpaymentplan_permission() {
  return array(
    'view own subscriptions' => array(
      'title' => t('View own subscriptions'),
      'description' => t(
        'Let a user view subscriptions linked to it\'s account.'
      ),
    ),
    'view subscriptions' => array(
      'title' => t('View subscriptions'),
      'description' => t('Allows you to see all user subscription pages.'),
    ),
    'delete own subscriptions' => array(
      'title' => t('Delete own subscriptions'),
      'description' => t(
        'Let a user delete subscriptions linked to it\'s account.'
      ),
    ),
    'delete subscriptions' => array(
      'title' => t('Delete subscriptions'),
      'description' => t('Allows you to delete all user subscription pages.'),
    ),
  );
}

/**
 * Implements hook_access().
 */
function uc_checkoutpaymentplan_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create ' . TECHNICAL_NAME, $account);
  }
  elseif ($op == 'update' || $op == 'delete') {
    if (
      user_access('edit own ' . TECHNICAL_NAME, $account)
      && ($account->uid == $node->uid)
    ) {
      return true;
    }
  }
}

/**
 * Implements hook_help().
 */
function uc_checkoutpaymentplan_help($path, $arg) {
  switch ($path) {
    case 'admin/help#uc_checkoutpaymentplan':
      ob_start();
      include 'includes/help.page.inc';
      $html = ob_get_clean();
      ob_end_flush();
      return $html;
  }
}

/**
 * Implements hook_page_alter().
 */
function uc_checkoutpaymentplan_page_alter(&$page) {
  switch (cko_clean_path(current_path())) {
    case '/user/#/subscriptions':
    case '/admin/store/orders/subscriptions':
      global $baseUrl;
      $path = $baseUrl . '/' . drupal_get_path('module', 'uc_checkoutpaymentplan');
      drupal_add_js(
        $path . "/includes/scripts/subscription_details.js",
        array(
          'type' => 'file',
          'scope' => 'footer',
        )
      );
      break;
  }
}

/*
 * Implements hook_cron().
 *
 * @todo Make the cron job work or delete this function.
 */
function uc_checkoutpaymentplan_cron() {
  $queue = DrupalQueue::get("uc_checkoutpaymentplan_worker");
  $queue->createItem(null);

}

/*
 * Implements hook_cron_queue_info().
 *
 * @todo Make the cron job work or delete this function.
 */
function uc_checkoutpaymentplan_cron_queue_info() {
  $queues['uc_checkoutpaymentplan_worker'] = array(
    'worker callback' => 'ckopp_worker',
  );
  return $queues;
}

/**
 * Implements hook_form_alter().
 */
function uc_checkoutpaymentplan_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'uc_payment_method_settings_form':
      $form['checkoutpayment_recurring'] = array(
        '#type' => 'fieldset',
        '#title' => t('Recurring payments settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['checkoutpayment_recurring']['ckopp_allow_mixed_products'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow other products in the cart with subscriptions?'),
        '#default_value' => variable_get('ckopp_allow_mixed_products', false),
      );
      break;

    case 'cko_payment_plan_node_form':
      $form['#validate'][] = 'uc_checkoutpaymentplan_form_validate';

      $form['cko_pp'] = array(
        "#type" => "fieldset",
        "#access" => true,
        "#title" => "Recurring Payments *",
        "#collapsible" => true,
        "#collapsed" => true,
        "#weight" => -8,
        "#group" => "additional_settings",
        "#attributes" => array(
          "class" => array(
            "comment-node-settings-form",
          ),
        ),
      );

      $form['cko_pp']['ckopp_pp_plan_id'] = array(
        '#type' => 'textfield',
        '#title' => t('PlanId'),
        '#disabled' => true,
        '#description' => t(
          'Payment plan id, provided by <i class="cko-logo"></i>
          <b>Checkout</b>.com, prefixed with <i>rp_</i> for identical
          recurring plans.'
        ),
      );

      $form['cko_pp']['ckopp_pp_cycle'] = array(
        '#type' => 'textfield',
        '#title' => t('Cycle'),
        '#required' => true,
        '#description' => t(
          'Elapsed time between the charge and the first transaction of the
          recurring plan.'
        ),
      );

      $form['cko_pp']['ckopp_pp_recurring_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Recurring Count'),
        '#required' => true,
        '#description' => t(
          'Number of recurring transactions included in the Payment Plan.'
        ) . ckopp_html(
          'tooltip',
          array(
            'message' => '<b>Note</b>: recurringCount does not include the initial payment.',
          )
        ),
      );

      $form['cko_pp']['ckopp_pp_status'] = array(
        '#type' => 'select',
        '#title' => t('Status'),
        '#description' => t(
          'Defines the status of the recurring payment plan.'
        ) . ckopp_html(
          'tooltip',
          array(
            'message' => 'It is used for the endpoint that will allow to
              monitor the health of a recurring plan.',
          )
        ),
        '#options' => array(
          1 => t('Active'),
          4 => t('Suspended'),
        ),
      );

      $form['cko_pp']['ckopp_pp_autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Auto capture time'),
        '#description' => t(
          'Delayed capture time in hours for the transactions generated by
          the recurring engine.'
        ),
        '#default_value' => 0,
      );

      $form['base']['model']['#description'] = t(
        'Unique identifier for the recurring plan.'
      );
      $form['base']['prices']['sell_price']['#description'] = t(
        'Customer purchase price per payment.'
      );
      $form['base']['shippable']['#default_value'] = 0;

      if ($form['base']['model']['#default_value'] != '') {
        $payment_plan = new PaymentPlan;
        $payment_plan->trackId = $form['base']['model']['#default_value'];
        $payment_plan->get();

        $form['base']['model']['#disabled'] = true;
        $form['cko_pp']['ckopp_pp_cycle']['#disabled'] = true;
        $form['cko_pp']['ckopp_pp_recurring_count']['#disabled'] = true;
        $form['cko_pp']['ckopp_pp_plan_id']['#value'] = $payment_plan->id;
        $form['cko_pp']['ckopp_pp_cycle']['#default_value'] = $payment_plan->cycle;
        $form['cko_pp']['ckopp_pp_recurring_count']['#default_value'] = $payment_plan->recurringCount;
        $form['cko_pp']['ckopp_pp_status']['#default_value'] = $payment_plan->status;
        $form['cko_pp']['ckopp_pp_autocaptime']['#default_value'] = $payment_plan->autoCapTime;
      }
      break;

    case 'uc_cart_view_form':
      $items = uc_cart_get_contents();
      $hasSubscription = false;
      $numberOfSubscriptions = 0;

      foreach ($items as $product) {
        if ($product->type == 'cko_payment_plan') {
          $numberOfSubscriptions += $product->qty;
        }
      }

      if ($numberOfSubscriptions > 1) {
        foreach ($items as $item) {
          if ($item->type == 'cko_payment_plan') {
            if ($item->qty > 1) {
              drupal_set_message(
                t(
                  'We removed :qty instances of :subscription, since only one
                  subscription can be bought at the same time',
                  array(
                    ':qty' => $item->qty - 1,
                    ':subscription' => $item->title,
                  )
                ),
                'warning'
              );
              $item->qty = 1;
              uc_cart_update_item($item);
              drupal_goto('cart');
            }

            uc_cart_remove_item($item->nid, null, $item->data);
            drupal_set_message(
              t(
                'We removed :subscription, since only one subscription can be
                bought at the same time',
                array(
                  ':subscription' => $item->title,
                )
              ),
              'warning'
            );
            drupal_goto('cart');
          }
        }
      }
      if ($numberOfSubscriptions == 1 && count($items) > 1 && !variable_get('ckopp_allow_mixed_products')) {
        foreach ($items as $item) {
          if ($item->type != 'cko_payment_plan') {
            uc_cart_remove_item($item->nid, null, $item->data);
            drupal_set_message(
              t(
                'We removed :product. It is not allowed to buy subscriptions together with other products.',
                array(
                  ':product' => $item->title,
                )
              ),
              'warning'
            );
            drupal_goto('cart');
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_validate().
 */
function uc_checkoutpaymentplan_form_validate(&$elements, &$form_state, $form_id = null) {
  switch ($form_state['build_info']['form_id']) {
    case 'cko_payment_plan_node_form':
      $values = $form_state['values'];
      $errors = array();

      $payment_plan = new PaymentPlan;
      $errors['ckopp_pp_cycle'] = $payment_plan->validate(
        'cycle', $values['ckopp_pp_cycle']
      );
      $errors['ckopp_pp_recurring_count'] = $payment_plan->validate(
        'recurringCount', $values['ckopp_pp_recurring_count']
      );
      $errors['ckopp_pp_status'] = $payment_plan->validate(
        'status', $values['ckopp_pp_status']
      );
      $errors['ckopp_pp_autocaptime'] = $payment_plan->validate(
        'autoCapTime', $values['ckopp_pp_autocaptime']
      );
      $errors['model'] = $payment_plan->validate(
        'trackId', $values['model']
      );
      $errors['sell_price'] = $payment_plan->validate(
        'value', $values['sell_price']
      );

      foreach ($errors as $field => $message) {
        if ($message != null) {
          form_set_error($field, $message);
        }
      }
      break;
    
    case 'ckopp_subscription_filter_form':
      // @todo
      break;

  }
}

/**
 * Implements hook_submit().
 */
function uc_checkoutpaymentplan_form_submit(&$elements, &$form_state, $form_id = null) {
  switch ($form_state['build_info']['form_id']) {
    case 'ckopp_subscription_filter_form':
      $values = $form_state['values'];
      variable_set('ckopp_filter_status', $values['cko_filter_status']);
      variable_set('ckopp_filter_plan', $values['cko_filter_plan']);
      break;

  }
}

/**
 * Implements hook_node_insert().
 */
function uc_checkoutpaymentplan_node_insert($node) {
  if ($node->type == "cko_payment_plan") {
    $payment_plan = new PaymentPlan;

    $payment_plan->name = $node->title;
    $payment_plan->trackId = $node->model;
    $payment_plan->autoCapTime = $node->ckopp_pp_autocaptime;
    $payment_plan->currency = variable_get('uc_currency_code');
    $payment_plan->value = round($node->sell_price * 100, 0);
    $payment_plan->cycle = $node->ckopp_pp_cycle;
    $payment_plan->recurringCount = $node->ckopp_pp_recurring_count;
    $payment_plan->status = $node->ckopp_pp_status;

    $response = $payment_plan->create();
  }
}

/**
 * Implements hook_node_update().
 */
function uc_checkoutpaymentplan_node_update($node) {
  if ($node->type == "cko_payment_plan") {
    $payment_plan = new PaymentPlan;

    $payment_plan->id = $node->ckopp_pp_plan_id;
    $payment_plan->name = $node->title;
    $payment_plan->trackId = $node->model;
    $payment_plan->autoCapTime = $node->ckopp_pp_autocaptime;
    $payment_plan->value = round($node->sell_price * 100, 0);
    $payment_plan->status = $node->ckopp_pp_status;

    $response = $payment_plan->update();
  }
}

/**
 * Implements hook_node_delete().
 */
function uc_checkoutpaymentplan_node_delete($node) {
  if ($node->type = "cko_payment_plan") {
    $payment_plan = new PaymentPlan;
    $payment_plan->trackId = $node->model;
    $response = $payment_plan->delete();
  }
}

/**
 * Implements hook_cko_processing_alter().
 */
function uc_checkoutpaymentplan_cko_processing_alter(&$order, &$config) {
  foreach ($order->products as $key => $value) {
    if ($value->data["type"] == 'cko_payment_plan') {
      $cust_pay_plan = new CustomerPaymentPlan;

      $customer = new Customer;
      $customer->email = $order->primary_email;
      if (!$customer->get()) {
        $zeroAuthDetails['method'] = 'cardToken';
        $zeroAuthDetails['cardToken'] = $config['postedParam']['cardToken'];
        $zeroAuthDetails['zeroDollarAuth'] = true;
        $result = cko_processing($order, $zeroAuthDetails);

        unset($config['postedParam']['cardToken']);
      }

      if (!$cust_pay_plan->exists($order->primary_email, $value->model)) {
        $config['postedParam']['paymentPlans'][] = array(
          "planId" => $cust_pay_plan->planId,
        );
        $config['postedParam']['transactionIndicator'] = 2;
      }
      else {
        uc_cart_remove_item($value->nid, null, $value->data);
        drupal_set_message(
          t(
            "You are already subscribed to :subscription",
            array(
              ':subscription' => $value->title,
            )
          ), "error");
        $config = array();
        drupal_goto('cart');
      }
    }

  }
}

/**
 * Implements hook_cko_widget_alter().
 */
function uc_checkoutpaymentplan_cko_widget_alter(&$order, &$payment_method) {
  foreach ($order->products as $key => $value) {
    if ($value->data["type"] == 'cko_payment_plan') {
      $payment_method['settings']['paymentMode'] = 'cards';
    }
  }
}

/**
 * Implements hook_cko_syncronise_alter().
 */
function uc_checkoutpaymentplan_cko_syncronise_alter(&$config) {
  $list = new CheckoutComList;
  $list->syncronise();

  $config['message'][] = 'All the payment plans have been syncronised.';
}

/**
 * Outputs the "/user/%user/subscriptions" page.
 *
 * @param object $user
 *   The Drupal user object of the visited user.
 *
 * @return string
 *   The html output value.
 */
function ckopp_page_user_subscriptions($user) {
  global $user;
  if (
    !user_access('view subscriptions') &&
    !(
      user_access('view own subscriptions') &&
      explode('/', current_path())[1] === $user->uid
    )
  ) {
    return drupal_access_denied();
  }

  drupal_set_title($title = "Subscriptions", $output = CHECK_PLAIN);

  $customer = new Customer;
  $customer->email = $user->mail;
  $customer->get();

  $header = array('Subscription', 'End date', 'Amount', 'Actions');

  $list = new CheckoutComList;
  $list->queryObject = new CustomerPaymentPlan;
  $list->queryObject->customerId = $customer->id;
  $list->getAll();

  if (!empty($list->list)) {
    $rows = array();
    foreach ($list->list as $customer_payment_plan) {
      $payment_plan = new PaymentPlan;
      $payment_plan->id = $customer_payment_plan->planId;
      $payment_plan->get();

      $actions = drupal_get_form(
        'ckopp_subscription_actions_form',
        array(
          'id' => $customer_payment_plan->id,
        )
      );

      $rows[] = array(
        $payment_plan->name,
        $customer_payment_plan->nextRecurringDate,
        $payment_plan->currency . ' ' . $payment_plan->value . ' per ' . $payment_plan->cycle,
        render($actions),
      );
    }

    return '<div id="cko-subscription-details" class="hidden"></div>' . theme('table', array('header' => $header, 'rows' => $rows));
  }

  return '<div class="messages info">' . t('There are no active subscriptions.') . '</div>';
}

/**
 * Outputs the "/admin/store/subscriptions" page.
 *
 * @return string
 *   The html output value.
 */
function ckopp_page_admin_subscriptions() {
  drupal_set_title($title = "Subscriptions overview", $output = CHECK_PLAIN);

  $filter= drupal_get_form('ckopp_subscription_filter_form');
  $filter = drupal_render($filter);

  $header = array(
    'status' => '',
    'subscription' => 'Subscription',
    'customer' => 'Customer name',
    'installmentsPayed' => 'Installments payed',
    'nextRecurringDate' => 'Next payment',
    'frequency' => 'Frequency',
    'actions' => 'Actions',
  );

  $list = new CheckoutComList;
  $list->queryObject = new CustomerPaymentPlan;
  $list->queryObject->status = variable_get('ckopp_filter_status', NULL);
  $list->queryObject->planId = variable_get('ckopp_filter_plan', NULL);
  $list->getAll();

  if (!empty($list->list)) {
    $rows = array();
    foreach ($list->list as $customer_payment_plan) {
      $row = $header;

      $row['nextRecurringDate'] = $customer_payment_plan->getString('nextRecurringDate');

      switch ($customer_payment_plan->status) {
        case 0:
        case 2:
          $row['status'] = '<div class="cko-error"> </div>';
          break;

        case 3:
        case 4:
          $row['status'] = '<div class="cko-warning"> </div>';
          break;
        
        case 5:
          $row['status'] = '<div class="cko-success"> </div>';
          break;
      }

      $row['actions'] = drupal_get_form(
        'ckopp_subscription_actions_form',
        array(
          'id' => $customer_payment_plan->id,
          'view' => 'list',
        )
      );
      $row['actions'] = drupal_render($row['actions']);

      $payment_plan = new PaymentPlan;
      $payment_plan->id = $customer_payment_plan->planId;
      $payment_plan->get();

      $row['frequency'] = $payment_plan->getString('cycle');

      $row['installmentsPayed'] = ckopp_html(
        'progressbar',
        array(
          'percentage' => round(
            (($payment_plan->recurringCount - $customer_payment_plan->recurringCountLeft) / $payment_plan->recurringCount) * 100
          ),
        )
      );

      $result = db_select('uc_products', 'p')
        ->fields('p')
        ->condition('model', $payment_plan->trackId, '=')
        ->orderBy('vid', 'DESC')
        ->execute()
        ->fetchObject();

      if (empty($result)) {
        $row['subscription'] = $payment_plan->name . ckopp_html(
          'tooltip',
          array(
            'message' => 'This subscription has no matching node
            on this website.',
          )
        );
      }
      else {
        $row['subscription'] = l(
          $payment_plan->name,
          drupal_get_path_alias('node/' . $result->nid)
        );
      }

      $customer = new Customer;
      $customer->id = $customer_payment_plan->customerId;
      $customer->get();

      if ($user = user_load_by_mail($customer->email)) {
        $row['customer'] = l($customer->name, 'user/' . $user->uid);
      }
      else {
        $row['customer'] = $customer->name . ckopp_html(
          'tooltip',
          array(
            'message' => 'This person does not have
            an account on this website.',
          )
        );
      }

      $rows[] = array('data' => $row, 'class' => array($customer_payment_plan->id));
    }

    $table = '<div id="cko-subscription-details" class="hidden"></div>' . theme('table', array('header' => $header, 'rows' => $rows));

    return $filter . $table;
  }

  return $filter . '<div class="messages info">' . t('There are no active subscriptions.') . '</div>';
}

/**
 * This function is used to respond to AJAX callbacks.
 *
 * @param mixed $form
 *   The form array which called AJAX.
 * @param mixed $form_state
 *   The form state array of the form which called AJAX.
 * @param array $config
 *   The configuration array for the element.
 *
 * @return mixed
 *   This could be a string, a build array, json string, ...
 */
function ckopp_subscription_actions_form($form, &$form_state, array $config = array()) {
  global $user;

  $form['#attributes']['class'][] = $config['id'];
  $form['#attributes']['class'][] = 'cko_float_left';

  if (
    user_access('delete subscriptions') ||
    (
      user_access('delete own subscriptions') &&
      explode('/', current_path())[1] === $user->uid
    )
  ) {
    $form['cko_remove'] = array(
      '#type' => 'button',
      '#action' => $config['id'],
      '#value' => t('Delete'),
      '#prefix' => '<div id="delete_' . $config['id'] . '" class="cko_float_left">',
      '#suffix' => '</div>',
      '#ajax' => array(
        'callback' => 'ckopp_ajax_call',
        'wrapper' => 'delete_' . $config['id'],
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
  }

  $form['cko_view'] = array(
    '#type' => 'button',
    '#action' => $config['id'],
    '#value' => t('View'),
    '#ajax' => array(
      'callback' => 'ckopp_ajax_call',
      'wrapper' => 'cko-subscription-details',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $form;
}

/**
 * This function creates the filter form.
 *
 * @param mixed $form
 *   The form array which called AJAX.
 * @param mixed $form_state
 *   The form state array of the form which called AJAX.
 * @param array $config
 *   The configuration array for the element.
 *
 * @return mixed
 *   This could be a string, a build array, json string, ...
 */
function ckopp_subscription_filter_form($form, &$form_state) {
  $form['#validate'][] = 'uc_checkoutpaymentplan_form_validate';
  $form['#submit'][] = 'uc_checkoutpaymentplan_form_submit';

  $form['checkoutpaymentplan_filter'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $build['cko_ajax_message'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => array(
      'class' => 'cko-right',
      'id' => 'cko-ajax-message',
    ),
  );

  $form['checkoutpaymentplan_filter']['cko_filter_status'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('ckopp_filter_status', NULL),
    '#options' => array(
      NULL => t('-- status'),
      0 => t('Failed Initial'),
      1 => t('Active'),
      2 => t('Cancelled'),
      3 => t('In Arrears'),
      4 => t('Suspended'),
      5 => t('Completed'),
    ),
    '#attributes' => array(
      'class' => array('cko-search'),
    ),
  );

  $list = new CheckoutComList;
  $list->queryObject = new PaymentPlan;
  $list->getAll();

  $paymentplans[0] = t('-- subscription');

  foreach ($list->list as $paymentplan) {
    if (!empty($paymentplan)) {
      $paymentplans[$paymentplan->id] = $paymentplan->name;
    }
  }

  $form['checkoutpaymentplan_filter']['cko_filter_plan'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('ckopp_filter_plan', NULL),
    '#options' => $paymentplans,
    '#attributes' => array(
      'class' => array('cko-search'),
    ),
  );

  $form['checkoutpaymentplan_filter']['cko_filter_action'] = array(
    '#type' => 'submit',
    '#action' => 'Filter',
    '#value' => t('Filter'),
    '#attributes' => array(
      'class' => array('cko-search'),
    ),
  );

  $form['checkoutpaymentplan_filter']['cko_update'] = array(
    '#type' => 'button',
    '#action' => 'Update',
    '#value' => t('Refresh'),
    '#suffix' => drupal_render($build),
    '#ajax' => array(
      'callback' => 'ckopp_ajax_call',
      'wrapper' => 'cko-ajax-message',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#attributes' => array(
      'class' => array('cko-right'),
    ),
  );

  return $form;
}

/**
 * This function is used to respond to AJAX callbacks.
 *
 * @param mixed $form
 *   The form array which called AJAX.
 * @param mixed $form_state
 *   The form state array of the form which called AJAX.
 *
 * @return mixed
 *   This could be a string, a build array, json string, ...
 */
function ckopp_ajax_call($form, $form_state) {
  $path = $baseUrl . '/' . drupal_get_path('module', 'uc_checkoutpayment');

  switch ($form["#form_id"]) {
    case 'ckopp_subscription_actions_form':
      $cpp = new CustomerPaymentPlan;
      $cpp->id = $form_state['triggering_element']["#action"];

      switch ($form_state['triggering_element']["#value"]) {
        case 'Delete':
          if ($cpp->delete()) {
            $path = $baseUrl . '/' . drupal_get_path('module', 'uc_checkoutpayment');
            $build['checkoutpayment_recurring'] = array(
              '#type' => 'html_tag',
              '#tag' => 'img',
              '#attributes' => array(
                'src' => $path . '/includes/images/loading.svg',
                'onload' => 'ckoRemoveSubscriptions("' . $cpp->id . '")',
                'class' => 'cko-loading',
              ),
            );
            return render($build);
          }
          break;

        case 'View':
          $cpp->get();

          $c = new Customer;
          $c->id = $cpp->customerId;

          $pp = new PaymentPlan;
          $pp->id = $cpp->planId;

          if ($c->get() && $pp->get()) {
            $actions = drupal_get_form(
              'ckopp_subscription_actions_form',
              array(
                'id' => $cpp->id,
              )
            );

            unset($actions['cko_view']);

            $ckopp_html_config = array(
              'title' => $c->name . ' - ' . $pp->getString('name'),
              'row' => $cpp->id,
              'fields' => array(
                "Status" => $cpp->getString('status'),
                "Value" => $pp->getString('value'),
                "Plan ID" => $cpp->getString('id'),
                "Customer Plan ID" => $cpp->getString('customerId'),
                "Plan Track ID" => $pp->trackId,
                "Plan Duration" => $pp->getString('recurringCount'),
                "Card" => $cpp->getString('cardId'),
                "Total Collection Value" => $cpp->getString('totalCollectionValue'),
                "Total Collection Count" => $cpp->getString('totalCollectionCount'),
                "Frequency" => $pp->getString('cycle'),
                "Recurring Count Left" => $cpp->getString('recurringCountLeft'),
                "Previous Recurring Date" => $cpp->getString('previousRecurringDate'),
                "Next Recurring Date" => $cpp->getString('nextRecurringDate'),
              ),
              'actions' => drupal_render($actions),
              'wrapper' => 'cko-subscription-details',
            );
            return ckopp_html('fieldset', $ckopp_html_config);
          }
          break;

      }

      $build['checkoutpayment_recurring'] = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => t('Somthing went wrong, try again later.'),
        '#attributes' => array(
          'id' => 'cko-subscription-details',
          'class' => array(
            'messages',
            'error',
          ),
        ),
      );
      return render($build);
      break;
  
    case 'ckopp_subscription_filter_form':
      switch ($form_state['triggering_element']["#action"]) {
        case 'Update':
          $list = new CheckoutComList;
          if ($list->syncronise()) {
            $build['checkoutpayment_recurring'] = array(
              '#type' => 'html_tag',
              '#tag' => 'img',
              '#attributes' => array(
                'src' => $path . '/includes/images/loading.svg',
                'onload' => 'ckoRefreshPage()',
                'class' => 'cko-loading',
              ),
            );
            return render($build);
          }
          break;
      }
      return '<div class="cko-error cko-right cko-reponse"> </div>';
  }
}

/**
 * Formatting function to create HTML tooltips in strings.
 *
 * @todo Make the cron job work or delete this function.
 */
function ckopp_worker($data) {
  $list = new CheckoutComList;
  $list->syncronise();

  watchdog(
    "Checkout.com RP",
    "The local database was syncronised with the Checkout.com database",
    null,
    WATCHDOG_INFO
  );
}

/**
 * Formatting function to create HTML tooltips in strings.
 *
 * Possible usages:
 *   ckopp_html(
 *     'progressbar',
 *     array(
 *       'percentage' => 75,
 *       ['wrapper' => 'wrapper id']
 *     )
 *   );
 *
 *   ckopp_html(
 *     'subscription details',
 *     array(
 *       'title' => 'Example title',
 *       'row' => 'identiefier of the row',
 *       'properties' => array(
 *         'label 1' => 'value 1',
 *         'label 2' => 'value 2',
 *       ),
 *       ['wrapper' => 'wrapper id']
 *     )
 *   );
 *
 *   ckopp_html(
 *     'tooltip',
 *     array(
 *       'message' => 'example message displayed in the tooltip',
 *       ['wrapper' => 'wrapper id']
 *     )
 *   );
 *
 * @param string $element
 *   The HTML element to be generated.
 * @param array $config
 *   The configuration setting for the element.
 *
 * @return string
 *   The HTML code for the tooltip with translated text.
 */
function ckopp_html($element, array $config = array()) {
  switch ($element) {
    case 'fieldset':
      $renderedProps = "";

      foreach ($config['fields'] as $label => $value) {
        $renderedProps .= '
        <labelled-field class="cko-fieldset-fields">
          <label> ' . $label . '</label>
          <field> ' . $value . '</field>
        </labelled-field>';
      }

      $form['close_this'] = array(
        '#type' => 'button',
        '#action' => 'close',
        '#value' => t('Close'),
        '#ajax' => array(
          'callback' => 'ckopp_ajax_call',
        ),
        '#attributes' => array(
          'class' => array('cko-right'),
          'onclick' => 'ckoClose(\'cko-fieldset\')'
        ),
      );

      $closebutton = drupal_render($form);

      $build['checkoutpaymentplan_subscription'] = array(
        '#markup' => '<fieldset id="cko-fieldset" class="' . $config['row'] . '">
        <legend>
          ' . $config['title'] . '
        </legend>
        <div>
          <div>
            ' . $renderedProps . '
          </div>
          <div class="cko-fieldset-actions">
            ' . $closebutton . '
            ' . $config['actions'] . '
          </div>
        </div>
      </fieldset>
      ',
      );

      break;

    case 'progressbar':
      $build['checkoutpaymentplan_progressbar'] = array(
        '#markup' => '
          <div class="ckopp_progressbar ' . ($config['percentage'] == 100? 'completed' : NULL) . '" >
            <div style="width: ' . $config['percentage'] . '%;" ></div>
            <span>' . $config['percentage'] . '%</span>
          </div>
        ',
      );
      break;

    case 'tooltip':
      $build['checkoutpaymentplan_tooltip'] = array(
        '#markup' => '
          &nbsp;
          <div class="tooltip"> ?
            <span class="tooltiptext">
              ' . t($config['message']) . '
            </span>
          </div>
          &nbsp;
        ',
      );
      break;
  }

  if (array_key_exists('wrapper', $config)) {
    return '
      <div id="' . $config['wrapper'] . '" style="display: block;">
        ' . render($build) . '
      </div>';
  }

  return render($build);
}

/**
 * Developer function to print variables in a clean way.
 *
 * @param mixed $var
 *   Any variable of anytype.
 */
function pre_var_dump($var , $buffer = false) {
  if ($buffer) {
    ob_start();
    var_dump($var);
    $string = ob_get_clean();
    error_log($string, 0);
    return $string;
  }

  echo '<pre>';
  var_dump($var);
  echo '</pre>';
}

/**
 * Developer function which gives access to a developper page.
 *
 * @return mixed
 *   The output used for rendering the page.
 */
function page_development() {
  //variable_del('uc_currency_code');
  pre_var_dump(variable_get('uc_currency_code'));

  return 'NULL';
}

/**
 * Helper function to remove variables from paths.
 *
 * This function removes numbers and replaces them with #.
 * Eg: The path user/123/subscriptions will become /user/#/subscription.
 *
 * Note: A slash is added to the beginning.
 *
 * @param string $path
 *   A string returned by the function current_path().
 *
 * @param string
 *   A string with the variables removed.
 */
function cko_clean_path($path) {
  $cleanPath = '';

  foreach (explode('/', $path) as $pathPart) {
    if (1 === preg_match('~[0-9]~', $pathPart)) {
      $pathPart = '#';
    }
    
    $cleanPath .= '/' . $pathPart;
  }

  return $cleanPath;
}